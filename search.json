[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to moseley",
    "section": "",
    "text": "The widespread use of point-and-shoot hand held x-ray fluorescence (XRF) instruments in cultural heritage research, would suggest that it is easy enough for anyone to find out the elemental composition of materials. Alas, due to myriads of emission energies, escape peaks and other nuisances, reliable interpretation of x-ray fluorescence spectra is actually hard. If you are not yet deterred, just read the Handheld XRF in Cultural Heritage - A practical workbook for conservators with many, many examples of spectra that was recently made available on-line by the Getty Conservation Institute.\nMy take on this as a physicist and a python programmer is that instead of learning from data directly (i.e. staring at measured spectra), a nicer route to insight exists. Due to huge efforts and advances of the open source scientific computing community it is nowadays possible to install readily available python packages and create physics simulations and visualizations with a few lines of computer code. Once you understand why certain patterns of peaks appear, it becomes much more easy to interpret XRF spectra reliably.",
    "crumbs": [
      "Welcome to moseley"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "Welcome to moseley",
    "section": "Installation",
    "text": "Installation\n\nIf you would like to adapt this plot to your own needs, for instance to to see what happens if you change beam energy, you can install this package yourself.\n$ pip install moseley",
    "crumbs": [
      "Welcome to moseley"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "Welcome to moseley",
    "section": "Usage",
    "text": "Usage\nSee documentation: https://fligt.github.io/moseley/",
    "crumbs": [
      "Welcome to moseley"
    ]
  },
  {
    "objectID": "theoretical-peak-patterns.html",
    "href": "theoretical-peak-patterns.html",
    "title": "Theoretical peak patterns",
    "section": "",
    "text": "In order to unravel measured x-ray fluorescence (XRF) spectra it is essential to be able to compute the theoretical spectral emission patterns for individual elements. An XRF spectrum consists of a number of peaks whose positions/energies (expressed in kilo electron Volt) are specific for a given element. To a first approximation the intensities of the peaks are proportional the concentration of the element. However if we look with more scrutiny it turns out that the exact height proportions of the peaks varies with the thickness of the sample. Let’s skip the theoretical background and simply plot such an XRF spectrum. For now, simply import ElementXRF() and instantiate it for lead (Pb).\nIf you are interested in the physics behind this, you can find the gory details in a later section…\nfrom moseley import ElementXRF\nimport matplotlib.pyplot as plt\nPlotting a theoretical X-ray fluorescence spectrum can be done with the .plot_spectrum() method.\n# initialize plot \nfig, axs = plt.subplots(ncols=4, figsize=[15, 4], sharex=True, sharey=False)\naxs = axs.flatten()\n\n# iterate over a list of different sample thicknesses \nfor h_mm, ax in zip([0.001, 0.01, 0.1, 0.5], axs):   \n    Pb_xrf = ElementXRF('Pb', h_mm=h_mm) \n    Pb_xrf.plot_spectrum(facecolor='k', ax=ax, xlim=[1, 17], vlines_colors='r') \n    ax.set_title(f'Pb (h={h_mm}mm)')  \n    ax.set_xlim(xmax=20)\nWe can see here that these spectra (blue with black markers) for lead consist of multiple Gaussian shaped peaks. Most of these peaks are the result of closely spaced emission lines (red color). Each emission line corresponds to a specific transition of an electron between different electron shells. Although these patterns for lead samples of different thicknesses look fairly similar, their precise proportions vary.\nIf you want to inspect emission lines in detail you can take a look the .lines_table attribute.\nPb_xrf.lines_table # 0.5 mm\n\n\n\n\n\n\n\n\nname\nlabel\nenergy\ntrans_prob\nfluo_yield\njump_coeff\nattenuation\nintensity\n\n\n\n\n0\nLb4\nPb_L1M2\n12.3070\n0.338604\n0.112000\n0.135060\n0.462812\n0.002371\n\n\n1\nLb3\nPb_L1M3\n12.7950\n0.401364\n0.112000\n0.135060\n0.487145\n0.002958\n\n\n2\nLg2\nPb_L1N2\n15.0991\n0.114773\n0.112000\n0.135060\n0.378123\n0.000656\n\n\n3\nLg3\nPb_L1N3\n15.2175\n0.145259\n0.112000\n0.135060\n0.310437\n0.000682\n\n\n4\nLn\nPb_L2M1\n11.3490\n0.018116\n0.373000\n0.285714\n0.412679\n0.000797\n\n\n5\nLb1\nPb_L2M4\n12.6140\n0.787801\n0.373000\n0.285714\n0.478221\n0.040150\n\n\n6\nLg1\nPb_L2N4\n14.7657\n0.165149\n0.373000\n0.285714\n0.364340\n0.006412\n\n\n7\nLg6\nPb_L2O4\n15.1793\n0.028934\n0.373000\n0.285714\n0.381387\n0.001176\n\n\n8\nLl\nPb_L3M1\n9.1840\n0.037951\n0.360000\n0.600958\n0.292015\n0.002398\n\n\n9\nLa2\nPb_L3M4\n10.4490\n0.076339\n0.360000\n0.600958\n0.363219\n0.005999\n\n\n10\nLa1\nPb_L3M5\n10.5510\n0.683544\n0.360000\n0.600958\n0.368916\n0.054556\n\n\n11\nLb6\nPb_L3N1\n12.1432\n0.010655\n0.360000\n0.600958\n0.454454\n0.001048\n\n\n12\nLb2,15\nPb_L3N4,5\n12.6007\n0.169784\n0.360000\n0.600958\n0.477560\n0.017542\n\n\n13\nLb5\nPb_L3O4,5\n13.0143\n0.021727\n0.360000\n0.600958\n0.497792\n0.002340\n\n\n14\nMg\nPb_M3N5\n2.6538\n1.000000\n0.005047\n0.137090\n0.027508\n0.000019\n\n\n15\nMb\nPb_M4N6\n2.4443\n0.997068\n0.031350\n0.209486\n0.074410\n0.000487\n\n\n16\nMa\nPb_M5N6,7\n2.3423\n1.000000\n0.030775\n0.430848\n0.068258\n0.000905",
    "crumbs": [
      "Theoretical peak patterns"
    ]
  },
  {
    "objectID": "theoretical-peak-patterns.html#functions",
    "href": "theoretical-peak-patterns.html#functions",
    "title": "Theoretical peak patterns",
    "section": "FUNCTIONS",
    "text": "FUNCTIONS\n\nsource\n\nget_attenuation\n\n get_attenuation (element, emission_energy_keV,\n                  excitation_energy_keV='rhodium_Ka', h_mm=0.1)\n\n*Attenuation factors for emissions at emission_keVs for pure sample with thickness h_mm.\nSee Thomsen_2007 equation 11.\nReturns: att_list (array of floats)*\n\nsource\n\n\nplot_pattern\n\n plot_pattern (ptrn_dict, ax=None, offset=0, color=None)\n\nPlot a single element peak pattern.\n\nsource\n\n\nfind_peaks\n\n find_peaks (x, y, min_prom=0.001)\n\n*Find peaks in spectrum x, y with minimal prominence min_prom=\nReturns: peaks_xy*\n\nsource\n\n\ngaussian_convolve\n\n gaussian_convolve (peak_energies, peak_intensities, x_keVs=None,\n                    std=0.01)\n\n*Convolves line spectrum defined by peak_energies and peak_intensities\nwith a Gaussian peak shape.*\n\nsource\n\n\nElementXRF\n\n ElementXRF (element, excitation_energy_keV='rhodium_Ka', h_mm=0.1,\n             x_keVs=None, std=0.01, min_prom=0.001)\n\nComputes fluorescence emission line energies and intensities for element.\n\n10/xraydb.material_mu('Pb', 22100)\n\nnp.float64(0.013224338571882998)\n\n\n\n# https://xraypy.github.io/XrayDB/examples.html#mu-calculations-for-materials\nmu_20kev = xraydb.material_mu('CaCO3', 20000, density=2.71)\nprint(\"CaCO3 1/e depth at 20keV = {:.3f} mm\".format(10/mu_20kev))\n\nCaCO3 1/e depth at 20keV = 0.648 mm\n\n\n\nxraydb.chemparse('(PbCO3)2Pb(OH)2')\n\n{'Pb': 3.0, 'C': 2.0, 'O': 8.0, 'H': 2.0}\n\n\n\nlead_white = '(PbCO3)2Pb(OH)2'\n\n\nmu_lead_white = xraydb.material_mu(lead_white, 22100,density=5)\n10 * 1/mu_lead_white\n\nnp.float64(0.03733713607717201)\n\n\n\nPb_rho = xraydb.atomic_density('Pb') \nPb_rho\n\n11.34\n\n\n\nmass_mu_emiss = xraydb.mu_elam('Pb', 22100)\nmass_mu_emiss\n\nnp.float64(66.6826707720918)\n\n\n\nelement = 'Pb' \ndensity = 11.34 \nenergy = 22100 \nemission_depth_um = 10000/(xraydb.mu_elam(element, energy) * density) \nemission_depth_um\n\nnp.float64(13.224338571882996)\n\n\n\n10000 / xraydb.material_mu('Pb', energy, density=density)\n\nnp.float64(13.224338571882999)",
    "crumbs": [
      "Theoretical peak patterns"
    ]
  },
  {
    "objectID": "a-peak-pattern-atlas.html",
    "href": "a-peak-pattern-atlas.html",
    "title": "Peak pattern atlas",
    "section": "",
    "text": "Given our ability to generate theoretical XRF spectra we can now build an atlas of spectral peak patterns for different chemical elements. In the following we will ignore the exotic Lanthanides and Actinides and further limit our attention to what I call the Elements Of Interest. To plot the periodic table instantiate the PeriodicTable class and run the .plot() method. The edges of pre-selected elements of interest (to me) are colored red.\nfrom moseley import PeriodicTable, PeakPatternAtlas\ntable = PeriodicTable()\ntable.plot_table();\nWe are now in a position to compute our atlas of elemental XRF peak patterns…\nppa = PeakPatternAtlas()\n\nReady building Peak Pattern Atlas!\nax = ppa.plot_atlas()\nax.set_ylabel('Elements (alpha sorted)');",
    "crumbs": [
      "Peak pattern atlas"
    ]
  },
  {
    "objectID": "a-peak-pattern-atlas.html#functions",
    "href": "a-peak-pattern-atlas.html#functions",
    "title": "Peak pattern atlas",
    "section": "FUNCTIONS",
    "text": "FUNCTIONS\n\nsource\n\nPeriodicTable\n\n PeriodicTable (EOI=None)\n\nCreate a periodic table of elements.\n\nsource\n\n\ncolorize\n\n colorize (ptable_regular)\n\n*Generate regular element colors dictionary.\nReturns: element_colors_dict*\n\nsource\n\n\nPeakPatternAtlas\n\n PeakPatternAtlas (EOI=None, excitation_energy_keV=25, x_keVs=None,\n                   verbose=True)\n\nCreate a PeakPatternAtlas instance.",
    "crumbs": [
      "Peak pattern atlas"
    ]
  },
  {
    "objectID": "moseley-law.html",
    "href": "moseley-law.html",
    "title": "Moseley’s law",
    "section": "",
    "text": "Henry Moseley (image: wikipedia)\n\nAs we have seen in the previous section an X-Ray Fluorescence spectrum for a specific chemical element contains a characteristic combination of sharp peaks of different heights at different energies. These discrete peaks are a direct evidence of the quantum mechanics of electrons jumping from one discrete energy level to another. In 1913-1914 the young British physicist Henry Moseley discovered a beautiful simple regular pattern that relates the energy of the (typically) strongest peak in a pure element spectrum (called the \\(K_{\\alpha}\\) line) to the atomic number (\\(Z\\)).\n\\[ E_{K_{\\alpha}} = 10.2 \\left( Z - 1 \\right)^2 \\]\nWhere the energy is expressed in units of electron volt \\([eV]\\). Suppose now that you observe a large peak in a spectrum at a given energy but it is unknown which element generated. It is useful now to invert this expression to calculate the atomic number of the prime suspect chemical element that possibly emitted the peak.\n\\[ Z = \\sqrt{\\frac{E_{K_{\\alpha}}}{10.2}} + 1 \\]\nNote that that we have simple a square root function here. As a practical numerical example, suppose now we measure an XRF spectrum for a sample of a pure (for the sake of this exercise) unknown element (See figure x). The largest peak in this spectrum has an energy of 6.40 keV = 6400 eV. Rounding off one can calculate\n\\[ Z = \\sqrt{\\frac{6400}{10.2}} + 1 = 26.05 \\approx 26 \\rightarrow \\rm{Fe} \\]\nIn the periodic table it is found that this atomic number corresponds to iron (Fe), which indeed is the element used for the measurement. Let’s create a plot with peak patterns for all regular elements from sodium (Na) up to tin (Sn) to see if we can confirm Moseley’s law.\n\nfrom moseley import PeriodicTable, PeakPatternAtlas, moseley_law \nimport numpy as np\n\n\ntable = PeriodicTable()\nH_to_Sn = list(table.ptable_regular['symbol'])[10:50]\nppa = PeakPatternAtlas(EOI=H_to_Sn, excitation_energy_keV=40)\n\nReady building Peak Pattern Atlas!                                                                   \n\n\n\nx = np.arange(0, 30, 0.1)\ny = moseley_law(x)\n\nax = ppa.plot_atlas(moseley=True)\nax.plot(x, y, color='r', label='Moseley\\'s law')\n\nax.set_ylim([8, 52])\nax.set_ylabel('Atomic number (Z)') \nax.legend(loc='lower right');\n\n\n\n\n\n\n\n\nPhysics can (sometimes) be simple and beautiful. Thank you, Henry Moseley!",
    "crumbs": [
      "Moseley's law"
    ]
  },
  {
    "objectID": "moseley-law.html#from-peak-energies-to-the-periodic-table",
    "href": "moseley-law.html#from-peak-energies-to-the-periodic-table",
    "title": "Moseley’s law",
    "section": "",
    "text": "Henry Moseley (image: wikipedia)\n\nAs we have seen in the previous section an X-Ray Fluorescence spectrum for a specific chemical element contains a characteristic combination of sharp peaks of different heights at different energies. These discrete peaks are a direct evidence of the quantum mechanics of electrons jumping from one discrete energy level to another. In 1913-1914 the young British physicist Henry Moseley discovered a beautiful simple regular pattern that relates the energy of the (typically) strongest peak in a pure element spectrum (called the \\(K_{\\alpha}\\) line) to the atomic number (\\(Z\\)).\n\\[ E_{K_{\\alpha}} = 10.2 \\left( Z - 1 \\right)^2 \\]\nWhere the energy is expressed in units of electron volt \\([eV]\\). Suppose now that you observe a large peak in a spectrum at a given energy but it is unknown which element generated. It is useful now to invert this expression to calculate the atomic number of the prime suspect chemical element that possibly emitted the peak.\n\\[ Z = \\sqrt{\\frac{E_{K_{\\alpha}}}{10.2}} + 1 \\]\nNote that that we have simple a square root function here. As a practical numerical example, suppose now we measure an XRF spectrum for a sample of a pure (for the sake of this exercise) unknown element (See figure x). The largest peak in this spectrum has an energy of 6.40 keV = 6400 eV. Rounding off one can calculate\n\\[ Z = \\sqrt{\\frac{6400}{10.2}} + 1 = 26.05 \\approx 26 \\rightarrow \\rm{Fe} \\]\nIn the periodic table it is found that this atomic number corresponds to iron (Fe), which indeed is the element used for the measurement. Let’s create a plot with peak patterns for all regular elements from sodium (Na) up to tin (Sn) to see if we can confirm Moseley’s law.\n\nfrom moseley import PeriodicTable, PeakPatternAtlas, moseley_law \nimport numpy as np\n\n\ntable = PeriodicTable()\nH_to_Sn = list(table.ptable_regular['symbol'])[10:50]\nppa = PeakPatternAtlas(EOI=H_to_Sn, excitation_energy_keV=40)\n\nReady building Peak Pattern Atlas!                                                                   \n\n\n\nx = np.arange(0, 30, 0.1)\ny = moseley_law(x)\n\nax = ppa.plot_atlas(moseley=True)\nax.plot(x, y, color='r', label='Moseley\\'s law')\n\nax.set_ylim([8, 52])\nax.set_ylabel('Atomic number (Z)') \nax.legend(loc='lower right');\n\n\n\n\n\n\n\n\nPhysics can (sometimes) be simple and beautiful. Thank you, Henry Moseley!",
    "crumbs": [
      "Moseley's law"
    ]
  },
  {
    "objectID": "moseley-law.html#functions",
    "href": "moseley-law.html#functions",
    "title": "Moseley’s law",
    "section": "Functions",
    "text": "Functions\n\nsource\n\nmoseley_law\n\n moseley_law (E_K_alpha_keV)\n\n*Square root form of Moseley’s law.\nArgs: E_K_alfa_keV (float or array of floats): K_alpha peak energy in keV\nExample: moseley_law(6.40)\nReturns: Z (float or array of floats): predicted atomic number*",
    "crumbs": [
      "Moseley's law"
    ]
  },
  {
    "objectID": "xrf-physics-the-gory-details.html",
    "href": "xrf-physics-the-gory-details.html",
    "title": "XRF physics - the gory details",
    "section": "",
    "text": "If you are not into physics, you can safely skip this section.\nIn a previous section of this documentation I described how one can use the ElementXRF(&lt;element&gt;) class to compute an x-ray fluorescence spectrum object for a given chemical element. The whole point of the moseley package is to enable you to do so but to protect you from the gory details of XRF physics. However, in case you are interested to learn how this computation is done you can find the details of that calculation here.\nThe modeling of X-ray fluorescence spectra is described in a nice tutorial Basic Fundamental Parameters in X-Ray Fluorescence by Volker Thomsen online and as pdf.\nThe fundamental parameters are measured x-ray properties of chemical elements that we need to look up somehow. Not so very long ago physicist would look up the x-ray fluorescence energies and other measured properties of different chemical elements in the X-RAY DATA BOOKLET. Instead, more conveniently I will show how to look up those values programmatically using the well documented python package. See pypi and github. One can also consult these values in the XRayDB interactive web app.\nSo, let’s see how we can implement some of the equations in the tutorial by Volker Thomsen and look up the required parameter values using xraydb…",
    "crumbs": [
      "XRF physics - the gory details"
    ]
  },
  {
    "objectID": "xrf-physics-the-gory-details.html#pure-iron",
    "href": "xrf-physics-the-gory-details.html#pure-iron",
    "title": "XRF physics - the gory details",
    "section": "Pure iron",
    "text": "Pure iron\nLet’s check if we can reproduce the numerical example for the intensity of the iron \\(K_{\\alpha}\\) emission intensity of a thick pure iron irradiated by a cadmium isotope emitting at 22.1 keV. Here is the approximate equation describing the intensity of the \\(K_{\\alpha}\\) peak for a thick sample of iron. The emission intensity quickly approaches a maximum due to the limited penetration of the radiation into the sample:\n\\[ I_i = (I_0 C_i J_K g_{Ka} \\omega_K)(\\Omega/4 \\pi)\\frac{\\mu_i}{\\mu_s + \\mu_{s,Ei}} \\tag{Thomsen eq. 12}\\]\nLet’s try to extract numerical values for the transition probability \\(g_{K \\alpha}\\), the jump ratio coefficient \\(J_K\\), the fluorescence yield \\(\\omega_K\\) and the mass absorption coefficients at the at the incoming energy \\(\\mu_{i}\\) and emission energy \\(\\mu_{s,Ei}\\) from xraydb.\n\\[g_{K \\alpha} = 0.882\\]\n\\[J_K = 0.877\\]\n\\[\\omega_K = 0.347\\]\n\\[\\mu_i = \\mu_s = 18.55 cm^2/g \\tag{at 22.1 keV}\\]\n\\[\\mu_{s,Ei} = 70.46 cm^2/g \\tag{at 6.4 keV} \\]\n\nTransition probability \\(g_{K_{\\alpha}}\\)\nLet’s take a look at to transition probability $ g_{K }$. This the probability that \\(K_{\\alpha}\\) radiation will be emitted rather than that of another K line which is given by:\n\\[ g_{K\\alpha} = \\frac{I(K_{\\alpha})}{I(K_{\\alpha}) + I(K_{\\beta}) +...} \\tag{Thomsen eq. 6} \\]\nStarting point for all calculations is an overview of emission lines for the element of interest these can be accessed using the function xray_lines().\n\nimport xraydb\n\n\nxraydb.xray_lines('Fe')\n\n{'Ka3': XrayLine(energy=6267.4, intensity=0.000276096, initial_level='K', final_level='L1'),\n 'Ka2': XrayLine(energy=6392.1, intensity=0.294023, initial_level='K', final_level='L2'),\n 'Ka1': XrayLine(energy=6405.2, intensity=0.580277, initial_level='K', final_level='L3'),\n 'Kb3': XrayLine(energy=7059.3, intensity=0.0425566, initial_level='K', final_level='M2'),\n 'Kb1': XrayLine(energy=7059.3, intensity=0.0821556, initial_level='K', final_level='M3'),\n 'Kb5': XrayLine(energy=7110.0, intensity=0.000712115, initial_level='K', final_level='M4,5'),\n 'Lb4': XrayLine(energy=791.9, intensity=0.413833, initial_level='L1', final_level='M2'),\n 'Lb3': XrayLine(energy=791.9, intensity=0.586166, initial_level='L1', final_level='M3'),\n 'Ln': XrayLine(energy=628.6, intensity=0.0742626, initial_level='L2', final_level='M1'),\n 'Lb1': XrayLine(energy=717.9, intensity=0.925737, initial_level='L2', final_level='M4'),\n 'Ll': XrayLine(energy=615.5, intensity=0.0990365, initial_level='L3', final_level='M1'),\n 'La2': XrayLine(energy=704.8, intensity=0.0892847, initial_level='L3', final_level='M4'),\n 'La1': XrayLine(energy=704.8, intensity=0.811679, initial_level='L3', final_level='M5')}\n\n\nThe names of these lines are denoted in Siegbahn notation (e.g. Ka3, where ‘a’ stands for alpha). The lines are grouped according to their initial level, denoted with the IUPAC notation e.g. ‘K’ or ‘L1’. Within these groups the intensities a.k.a. transition probabilities are normalized to unity. The intensity of the \\(K_{\\alpha}\\) line is actually a sum of multiple overlapping Ka lines.\nTo the xray_lines() function one could provide an additional argument of an excitation_energy (in units of electron Volts [eV]) . This simply crops the list to emission lines below the corresponding edge, like so:\n\nxraydb.xray_lines('Fe', excitation_energy=7111) # just below the K edge at 7112\n\n{'Lb4': XrayLine(energy=791.9, intensity=0.413833, initial_level='L1', final_level='M2'),\n 'Lb3': XrayLine(energy=791.9, intensity=0.586166, initial_level='L1', final_level='M3'),\n 'Ln': XrayLine(energy=628.6, intensity=0.0742626, initial_level='L2', final_level='M1'),\n 'Lb1': XrayLine(energy=717.9, intensity=0.925737, initial_level='L2', final_level='M4'),\n 'Ll': XrayLine(energy=615.5, intensity=0.0990365, initial_level='L3', final_level='M1'),\n 'La2': XrayLine(energy=704.8, intensity=0.0892847, initial_level='L3', final_level='M4'),\n 'La1': XrayLine(energy=704.8, intensity=0.811679, initial_level='L3', final_level='M5')}\n\n\nLet’s see if the iron \\(K\\) intensities sum up to unity.\n\nFe_lines = xraydb.xray_lines('Fe') \nFe_names = list(Fe_lines.keys())\nFeK_names = [name for name in Fe_names if name.startswith('K')]\nFeKa_names = [name for name in Fe_names if name.startswith('Ka')]\nFeKb_names = [name for name in Fe_names if name.startswith('Kb')]\n\nFeK_total = sum([Fe_lines[l].intensity for l in FeK_names])\nFeKa_intensity = sum([Fe_lines[l].intensity for l in FeKa_names])\nFeKb_intensity = sum([Fe_lines[l].intensity for l in FeKb_names])\n\nprint(Fe_names)\nprint(FeKa_names)\nprint(FeKb_names) \n\nprint(f'Fe_Ka intensity: {FeKa_intensity:.04f}, Fe_Kb intensity: {FeKb_intensity:.04f}')     \nprint(f'Fe_K total: {FeK_total:.04f}')\n\n['Ka3', 'Ka2', 'Ka1', 'Kb3', 'Kb1', 'Kb5', 'Lb4', 'Lb3', 'Ln', 'Lb1', 'Ll', 'La2', 'La1']\n['Ka3', 'Ka2', 'Ka1']\n['Kb3', 'Kb1', 'Kb5']\nFe_Ka intensity: 0.8746, Fe_Kb intensity: 0.1254\nFe_K total: 1.0000\n\n\nThe transition probability value reported by Thomsen \\(g_{K\\alpha} = 0.882\\) is actually one percent higher then our calculated value \\(0.8746\\). Perhaps this is due to to the varying energies within a line envelope.\n\n\nJump ratio coefficient \\(J_K\\)\nFor each line the initial level corresponds to a specific absorption edge (denoted with IUPAC notation e.g. ‘K’ or ‘L1’. An overview can be found using xray_edges().\n\nxraydb.xray_edges('Fe')\n\n{'K': XrayEdge(energy=7112.0, fyield=0.350985, jump_ratio=7.893),\n 'L1': XrayEdge(energy=844.6, fyield=0.001, jump_ratio=1.1289),\n 'L2': XrayEdge(energy=719.9, fyield=0.0036, jump_ratio=1.4),\n 'L3': XrayEdge(energy=706.8, fyield=0.0063, jump_ratio=3.099),\n 'M1': XrayEdge(energy=91.3, fyield=2.8e-06, jump_ratio=1.0),\n 'M2': XrayEdge(energy=52.7, fyield=1.6e-05, jump_ratio=1.0),\n 'M3': XrayEdge(energy=52.7, fyield=0.0, jump_ratio=1.0),\n 'M4': XrayEdge(energy=2.0, fyield=0.00219375, jump_ratio=1.0),\n 'M5': XrayEdge(energy=2.0, fyield=0.0, jump_ratio=1.0)}\n\n\nMore convenient, the properties of a specific element edge can be found using the function xray_edge().\n\nxraydb.xray_edge('Fe', 'K')\n\nXrayEdge(energy=7112.0, fyield=0.350985, jump_ratio=7.893)\n\n\nFrom the jump ratio \\(r_K\\) the jump ratio coefficient can be calculated using\n\\[ J_K = \\frac{r_K -1}{r_K} \\tag{Thomsen eq. 4}\\]\n\nr_K = xraydb.xray_edge('Fe', 'K').jump_ratio\nJ_K = (r_K - 1) / r_K\nprint(f'Jump ratio coefficient: {J_K:.03f}')\n\nJump ratio coefficient: 0.873\n\n\nOk, our computed value corresponds quite well with the value 0.877 reported by Thomsen.\n\n\nFluorescence yield \\(\\mathbf{\\omega_K}\\)\nThomsen writes: The last factor, the probability of \\(K\\) radiation rather than the production of an Auger electron, is called the fluorescence yield \\(\\omega_K\\). The dependence of the fluorescence yield for a specific edges \\(K\\) and \\(L\\) as a function of the atomic number is depicted in figure 4. Let’s reproduce these curves with xraydb.\nAs a first step, we need a list of chemical elements for increasing atomic number Z.\n\nZ_list = list(range(1, 92))\nelement_list = [xraydb.atomic_symbol(Z) for Z in Z_list]\nprint(element_list)\n\n['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa']\n\n\n\nZ_list_L = list(range(15, 92)) # Lighter elements do no have an L shell \nelement_list_L = [xraydb.atomic_symbol(Z) for Z in Z_list_L]\n\n\nfyield_K_list = [xraydb.xray_edge(e, 'K').fyield for e in element_list]\nfyield_L_list = [xraydb.xray_edge(e, 'L2').fyield for e in element_list_L]\n\n# for iron K the fluorescence yield is \nZ_Fe = 26 \nfyield_FeK = xraydb.xray_edge('Fe', 'K').fyield\n\n\nimport matplotlib.pyplot as plt\n\n\nfig, ax = plt.subplots(figsize=[8, 4]) \n\nax.plot(Z_list, fyield_K_list, label=r'K edge $\\omega_K$')\nax.plot(Z_list_L, fyield_L_list, label=r'L edge $\\omega_L$')\nax.scatter(Z_Fe, fyield_FeK, color='r')\nax.annotate(f'Fe ({fyield_FeK:.03f})', [Z_Fe+2, fyield_FeK])\nax.set_xlabel('Atomic number')\nax.set_ylabel('fluorescence yield')\nax.grid()\nax.legend();\n\n\n\n\n\n\n\n\nOk, so we see that the computed fluorescence yield value 0.351 for the iron K edge \\(\\mathbf{\\omega_K}\\) corresponds to the reported value by thomsen 0.347 pretty well.\n\n\nCombining it all\nWe now have all ingredients to compute a theoretical (excitation) x-ray fluorescence spectrum with the function xrf_spectrum_xy(). This function for each peak multiplies transition probability, jump ratio coefficient and fluorescence yield to obtain a theoretical excitation spectrum. Note that we do not yet take into account absorption effects or scattering effects. For comparison we plot this with the spectrum generated with my moseley package.\n\nfrom moseley import ElementXRF \nimport matplotlib.pyplot as plt\n\n\nFe_xrf = ElementXRF('Fe', excitation_energy_keV=22)\n\n\nfig, ax = plt.subplots()\n\nFe_xrf.plot_spectrum(ax=ax)\nax.set_title(f'XrayDB Theoretical XRF spectrum for iron (Fe)')\nax.set_xlim([0, 22]);",
    "crumbs": [
      "XRF physics - the gory details"
    ]
  },
  {
    "objectID": "xrf-physics-the-gory-details.html#absorption-and-scattering",
    "href": "xrf-physics-the-gory-details.html#absorption-and-scattering",
    "title": "XRF physics - the gory details",
    "section": "Absorption and scattering",
    "text": "Absorption and scattering\nThe xraydb documentation gives an example calculation for different mass attenuation cross sections.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom xraydb import mu_elam \nimport xraydb\n\n\nenergy = np.arange(500, 25000, 10)  # energy in eV\nenergy_keV = energy / 1000 \n\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=[9, 7], sharex=True, sharey=True) \naxs = axs.flatten()\n\nelements = ['C', 'Ca', 'Fe', 'Pb']\n\nfor i, elem in enumerate(elements):       \n\n    mu_total = mu_elam(elem, energy, kind='total')\n    mu_photo = mu_elam(elem, energy, kind='photo')\n    mu_incoh = mu_elam(elem, energy, kind='incoh')\n    mu_coher = mu_elam(elem, energy, kind='coh')\n\n\n    ax = axs[i]\n\n    ax.set_title(f'X-ray mass attenuation for {elem}')\n    ax.plot(energy_keV, mu_total, linewidth=2, label='Total', alpha=0.5)\n    ax.plot(energy_keV, mu_photo, linewidth=2, label='Photo-electric', alpha=0.5)\n    ax.plot(energy_keV, mu_incoh, linewidth=2, label='Incoherent', alpha=0.5)\n    ax.plot(energy_keV, mu_coher, linewidth=2, label='Coherent', alpha=0.5)\n\n    ax.set_xlabel('Energy (keV)')\n    ax.set_ylabel(r'$\\mu/\\rho \\rm\\, (cm^2/gr)$')\n    #ax.legend()\n    ax.set_yscale('log')\n    \naxs[0].legend();\n\n\n\n\n\n\n\n\nI would like to see how scattering depends on atomic number \\(Z\\).\n\nZ0 = xraydb.atomic_number('H')\nZ1 = xraydb.atomic_number('Pb') + 1\nelement_list = [xraydb.atomic_symbol(Z) for Z in range(Z0, Z1)]\nprint(element_list)\n\n['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb']\n\n\n\nenergy = np.arange(500, 25000, 10)  # energy in eV\nenergy_keV = energy / 1000  \n\nelements = element_list\n\nprint(elements)\n\n['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb']\n\n\n\nmu_incoh_list = []\nmu_coh_list = []\nmu_photo_list = []\n\nfor elem in elements: \n    \n    mu_incoh = xraydb.mu_elam(elem, energy, kind='incoh')\n    mu_incoh_list.append(mu_incoh)\n    \n    mu_coh = xraydb.mu_elam(elem, energy, kind='coh')\n    mu_coh_list.append(mu_coh)\n    \n    mu_photo = xraydb.mu_elam(elem, energy, kind='photo')\n    mu_photo_list.append(mu_photo)\n\n\nK = np.array(mu_photo_list)\nS = np.array(mu_coh_list) + np.array(mu_incoh_list) # ignore Compton shift\n\n\ncmap = plt.get_cmap('viridis_r')\ngradient = np.linspace(0, 1, len(elements))\ncolors = cmap(gradient)\n\n\nfig, [ax0, ax1, ax2] = plt.subplots(ncols=3, sharex=True, sharey=True, figsize=[9, 4])\n\nfor i, mu in enumerate(mu_incoh_list): \n    ax0.plot(energy_keV, mu, label=elements[i], color=colors[i]) \n    ax0.set_xlabel('energy (keV)')\n    \nfor i, mu in enumerate(mu_coh_list): \n    ax1.plot(energy_keV, mu, label=elements[i], color=colors[i])\n    ax1.set_xlabel('energy (keV)')\n    \nfor i, mu in enumerate(mu_photo_list): \n    ax2.plot(energy_keV, mu, label=elements[i], color=colors[i])\n    ax2.set_xlabel('energy (keV)')\n\nax0.set_title('incoh')    \nax1.set_title('coh')    \nax2.set_title('photo')  \n\nlogscale = True \nif logscale == True:\n    ax0.set_yscale('log')\n    ax1.set_yscale('log')\n    ax2.set_yscale('log')\n#ax.legend()\n\n\n\n\n\n\n\n\nThe question now is if we can explain the lead shadow regions in some of light element peak maps. This problem is essentially combining the effects of scattering and absorption of a translucent layer. To calculate reflectance and transmission properties of such a system we can use the results of Kubelka-Munk theory.\nGiven the relatively small energy shift due to inelastic (incoherent) scattering, we can simplify the problem by summing elastic (coherent) and inelastic (incoherent) scattering into a single scattering coefficient \\(S\\).\n\ndef R_inf(K, S): \n    '''Infinite reflectance from `K` and `S`.\n    \n    Calculation with modified Saunderson equation. '''\n     \n    Rinf =  (S/K) / ((S/K) + 1 + np.sqrt(1 + 2 * (S/K))) \n    \n    return Rinf\n\n\nRinf = R_inf(K, S)\n\n\nRinf.shape\n\n(82, 2450)\n\n\n\nfig, ax = plt.subplots()\n\nextent = [energy_keV.min(), energy_keV.max(), Z0, Z1]\n\nim = ax.imshow(Rinf, interpolation='none', origin='lower', aspect=0.3, extent=extent, cmap='Greys_r')\n\nfig.colorbar(im, ax=ax)\n\nax.set_title(r'Pure element infinite reflectance $R_{\\infty}$')\nax.set_xlabel('Energy (keV)')\nax.set_ylabel('Atomic number (Z)'); \n#ax.set_ylim([0, 20])\n\n\n\n\n\n\n\n\nWhat we learn here is that the Compton ridge is essentially only due to the abundance of hydrogen in the paper. The scattering of carbon and oxygen can safely be neglected.\nNext step is the calculation of the transmission of a typical ( \\(200 ~ g/m^2\\)) paper…\n\nmu_paper = xraydb.material_mu('C6H12O6', energy, 0.5)\nmu_lead = xraydb.material_mu('PbCO3', energy, 20)\nmu_iron = xraydb.material_mu('Fe', energy, 10)\n\n\nd_paper = 0.5 # mm \nd_lead = 0.001 # mm \nd_iron = 0.001 # mm \n\nT_paper = np.exp(-d_paper * mu_paper)\nT_lead = np.exp(-d_lead * mu_lead)\nT_iron = np.exp(-d_iron * mu_iron)\n\n\nfig, ax = plt.subplots(figsize=[9, 4])\n\nax.plot(energy_keV, T_paper, label=f'{d_paper}mm paper')\nax.plot(energy_keV, T_lead, label=f'{d_lead}mm lead')\nax.plot(energy_keV, T_iron, label=f'{d_iron}mm iron')\nax.set_title('Transmission')\nax.set_xlabel('energy (keV)')\nax.set_ylabel('transmission')\nax.legend();\n\n\n\n\n\n\n\n\nSo, the one million dollar question now is: what is the expected reflectance of the sandwich?",
    "crumbs": [
      "XRF physics - the gory details"
    ]
  }
]